def format_sequences(sequences, input_features, output_features, window_size, predicted_seq_len):
    """
    Format sequences for Seq2Seq model with padding.

    Parameters:
    - sequences: List of dictionaries with 'X' and 'Y'.
    - input_features: List of feature names for inputs.
    - output_features: List of feature names for outputs.
    - window_size: Length of the input sequence.
    - predicted_seq_len: Length of the predicted sequence.

    Returns:
    - encoder_inputs: NumPy array of shape (num_sequences, window_size, num_features).
    - decoder_inputs: NumPy array of shape (num_sequences, predicted_seq_len, num_features).
    - targets: NumPy array of shape (num_sequences, predicted_seq_len, num_features).
    """
    encoder_inputs = []
    decoder_inputs = []
    targets = []

    for seq_idx, seq in enumerate(sequences):
        try:
            # Process encoder inputs with padding/truncation
            enc_input = np.array([seq['X'][feature] for feature in input_features], dtype=np.float32).T
            if enc_input.shape[0] < window_size:
                padding = np.zeros((window_size - enc_input.shape[0], len(input_features)), dtype=np.float32)
                enc_input = np.vstack((enc_input, padding))
            elif enc_input.shape[0] > window_size:
                enc_input = enc_input[:window_size]

            # Process decoder inputs with padding/truncation
            y_data = np.array([seq['Y'][feature] for feature in input_features], dtype=np.float32).T
            if y_data.shape[0] < predicted_seq_len:
                padding = np.zeros((predicted_seq_len - y_data.shape[0], len(input_features)), dtype=np.float32)
                y_data = np.vstack((y_data, padding))
            elif y_data.shape[0] > predicted_seq_len:
                y_data = y_data[:predicted_seq_len]

            dec_input = np.zeros((predicted_seq_len, len(input_features)), dtype=np.float32)
            dec_input[:-1, :] = y_data[:-1]
            dec_input[-1, :] = y_data[-1]  # Ensure the last row is not empty

            # Process targets with padding/truncation
            target = np.array([seq['Y'][feature] for feature in output_features], dtype=np.float32).T
            if target.shape[0] < predicted_seq_len:
                padding = np.zeros((predicted_seq_len - target.shape[0], len(output_features)), dtype=np.float32)
                target = np.vstack((target, padding))
            elif target.shape[0] > predicted_seq_len:
                target = target[:predicted_seq_len]

            # Append processed inputs and targets
            encoder_inputs.append(enc_input)
            decoder_inputs.append(dec_input)
            targets.append(target)

        except Exception as e:
            print(f"Sequence {seq_idx}: Error - {e}. Skipping this sequence.")
            continue

    # Convert lists to arrays
    return (
        np.array(encoder_inputs),
        np.array(decoder_inputs),
        np.array(targets)
    )
