import pandas as pd
import numpy as np
from geopy.distance import geodesic
from tqdm import tqdm
from shapely.geometry import Point as ShapelyPoint

def find_nearest_points_between_times(group, start_time, end_time, start_lat, start_lon, end_lat, end_lon):
    """
    Find the nearest points from other ships within a given time range.

    Parameters:
    - group: DataFrame containing points of other ships.
    - start_time, end_time: Time range to filter points.
    - start_lat, start_lon: Start coordinates of the gap.
    - end_lat, end_lon: End coordinates of the gap.

    Returns:
    - nearest_points: List of points (lat, lon) between the given time range.
    """
    # Filter data for the given time range
    filtered = group[(group['BaseDateTime'] > start_time) & (group['BaseDateTime'] < end_time)]
    nearest_points = []

    for _, row in filtered.iterrows():
        point = ShapelyPoint(row['LON'], row['LAT'])
        # Calculate distances to start and end points
        dist_to_start = geodesic((start_lat, start_lon), (row['LAT'], row['LON'])).meters
        dist_to_end = geodesic((end_lat, end_lon), (row['LAT'], row['LON'])).meters
        if dist_to_start < 10000 or dist_to_end < 10000:  # Threshold (10 km)
            nearest_points.append((row['LAT'], row['LON']))

    return nearest_points

def geodesic_interpolation(start_lat, start_lon, end_lat, end_lon, num_points):
    """
    Perform geodesic interpolation between two points.

    Parameters:
    - start_lat, start_lon: Coordinates of the start point.
    - end_lat, end_lon: Coordinates of the end point.
    - num_points: Number of intermediate points to generate.

    Returns:
    - lats, lons: Lists of interpolated latitude and longitude values.
    """
    total_distance = geodesic((start_lat, start_lon), (end_lat, end_lon)).meters
    lats, lons = [], []
    for frac in np.linspace(0, 1, num_points):
        distance_to_point = total_distance * frac
        interpolated_point = geodesic(meters=distance_to_point).destination((start_lat, start_lon), geodesic((start_lat, start_lon), (end_lat, end_lon)).initial)
        lats.append(interpolated_point.latitude)
        lons.append(interpolated_point.longitude)
    return lats, lons

def process_mmsi_data(data, time_gap_threshold=30 * 60, fallback_interpolation=True):
    """
    Process AIS data for each MMSI.

    Parameters:
    - data: DataFrame containing AIS data.
    - time_gap_threshold: Threshold in seconds to consider a gap large.
    - fallback_interpolation: Boolean to enable geodesic interpolation when no nearby ships are found.

    Returns:
    - processed_paths: List of paths (lat, lon) for all MMSIs.
    """
    processed_paths = []

    # Group data by MMSI
    grouped_data = data.groupby('MMSI')
    for mmsi, group in tqdm(grouped_data, desc="Processing MMSI", unit="MMSI"):
        group = group.sort_values(by='BaseDateTime')
        group['BaseDateTime'] = pd.to_datetime(group['BaseDateTime'])
        mmsi_paths = []

        for i in range(len(group) - 1):
            current_row = group.iloc[i]
            next_row = group.iloc[i + 1]

            time_diff = (next_row['BaseDateTime'] - current_row['BaseDateTime']).total_seconds()

            # If the gap is small, keep the path
            if time_diff <= time_gap_threshold:
                mmsi_paths.append((current_row['LAT'], current_row['LON']))
                continue

            # If the gap is large, find nearest points from other ships
            other_ships = data[data['MMSI'] != mmsi]
            nearest_points = find_nearest_points_between_times(
                other_ships,
                current_row['BaseDateTime'],
                next_row['BaseDateTime'],
                current_row['LAT'],
                current_row['LON'],
                next_row['LAT'],
                next_row['LON']
            )

            if nearest_points:
                print(f"Found {len(nearest_points)} nearby points for MMSI={mmsi} between {current_row['BaseDateTime']} and {next_row['BaseDateTime']}")
            else:
                print(f"No nearby points found for MMSI={mmsi} between {current_row['BaseDateTime']} and {next_row['BaseDateTime']}")

            # Include current point, nearest points, and next point
            mmsi_paths.append((current_row['LAT'], current_row['LON']))

            if nearest_points:
                mmsi_paths.extend(nearest_points)
            elif fallback_interpolation:
                # Fallback to interpolation
                interpolated_lats, interpolated_lons = geodesic_interpolation(
                    current_row['LAT'], current_row['LON'],
                    next_row['LAT'], next_row['LON'],
                    num_points=5  # Adjust number of points as needed
                )
                mmsi_paths.extend(zip(interpolated_lats, interpolated_lons))

            mmsi_paths.append((next_row['LAT'], next_row['LON']))

        processed_paths.append(mmsi_paths)

    return processed_paths

# Example usage
if __name__ == "__main__":
    # Load AIS data
    df = pd.read_csv("/path/to/modified_ais_data.csv")
    df['BaseDateTime'] = pd.to_datetime(df['BaseDateTime'])  # Ensure datetime parsing

    # Process data for all MMSIs
    processed_paths = process_mmsi_data(df)

    # Save processed paths to CSV (flatten the list for saving)
    flattened_paths = [
        {"LAT": lat, "LON": lon} for path in processed_paths for lat, lon in path
    ]
    pd.DataFrame(flattened_paths).to_csv("processed_paths.csv", index=False)

    print("Processed paths saved to 'processed_paths.csv'.")



===============================================================================================
import geopandas as gpd
import pandas as pd
import numpy as np
from geopy.distance import geodesic
from shapely.geometry import Point as ShapelyPoint
from tqdm import tqdm

def apply_buffer_to_water_mask(water_mask, buffer_distance=0.01):
    """
    Apply a buffer around water polygons in the world shapefile.

    Parameters:
    - water_mask: GeoDataFrame containing water polygons.
    - buffer_distance: Distance for buffering (in degrees, ~1 km for 0.01).

    Returns:
    - buffered_water_mask: Buffered GeoDataFrame for water polygons.
    """
    print("Applying buffer to water polygons...")
    buffered_water_mask = water_mask.buffer(buffer_distance)
    return gpd.GeoDataFrame(geometry=buffered_water_mask, crs=water_mask.crs)

def geodesic_interpolation_with_land_check(
    start_lat, start_lon, end_lat, end_lon, num_points, buffered_water_mask
):
    """
    Perform geodesic interpolation between two points, ensuring points remain on water.

    Parameters:
    - start_lat, start_lon: Coordinates of the start point.
    - end_lat, end_lon: Coordinates of the end point.
    - num_points: Number of intermediate points to generate.
    - buffered_water_mask: Buffered GeoDataFrame for water polygons.

    Returns:
    - valid_points: List of valid interpolated points (lat, lon) on water.
    """
    total_distance = geodesic((start_lat, start_lon), (end_lat, end_lon)).meters
    lats, lons = [], []
    spatial_index = buffered_water_mask.sindex  # Create a spatial index for efficient lookups

    for frac in np.linspace(0, 1, num_points):
        distance_to_point = total_distance * frac
        interpolated_point = geodesic(meters=distance_to_point).destination((start_lat, start_lon))
        lat, lon = interpolated_point.latitude, interpolated_point.longitude
        point = ShapelyPoint(lon, lat)

        # Check if the point is within any buffered water polygon
        possible_matches_index = list(spatial_index.intersection(point.bounds))
        possible_matches = buffered_water_mask.iloc[possible_matches_index]

        if not possible_matches.contains(point).any():
            print(f"Skipping interpolated point on land or near boundary: ({lat}, {lon})")
            continue

        lats.append(lat)
        lons.append(lon)

    valid_points = list(zip(lats, lons))
    return valid_points

def process_with_fallback_interpolation(data, water_mask, buffer_distance=0.01, time_gap_threshold=30 * 60):
    """
    Process AIS data with fallback interpolation, ensuring points remain on water.

    Parameters:
    - data: DataFrame containing AIS data.
    - water_mask: GeoDataFrame containing water polygons.
    - buffer_distance: Buffer distance for water polygons.
    - time_gap_threshold: Threshold in seconds for identifying large gaps.

    Returns:
    - processed_paths: List of paths (lat, lon) for all MMSIs.
    """
    buffered_water_mask = apply_buffer_to_water_mask(water_mask, buffer_distance)
    processed_paths = []

    grouped_data = data.groupby('MMSI')
    for mmsi, group in tqdm(grouped_data, desc="Processing MMSI", unit="MMSI"):
        group = group.sort_values(by='BaseDateTime')
        group['BaseDateTime'] = pd.to_datetime(group['BaseDateTime'])
        mmsi_paths = []

        for i in range(len(group) - 1):
            current_row = group.iloc[i]
            next_row = group.iloc[i + 1]

            time_diff = (next_row['BaseDateTime'] - current_row['BaseDateTime']).total_seconds()

            if time_diff <= time_gap_threshold:
                mmsi_paths.append((current_row['LAT'], current_row['LON']))
                continue

            print(f"Large time gap detected ({time_diff} seconds) between points.")
            num_points = int(time_diff / 900) + 1  # 15-minute intervals
            interpolated_points = geodesic_interpolation_with_land_check(
                current_row['LAT'],
                current_row['LON'],
                next_row['LAT'],
                next_row['LON'],
                num_points,
                buffered_water_mask
            )

            # Include valid interpolated points
            mmsi_paths.append((current_row['LAT'], current_row['LON']))
            mmsi_paths.extend(interpolated_points)
            mmsi_paths.append((next_row['LAT'], next_row['LON']))

        processed_paths.append(mmsi_paths)

    return processed_paths

# Example Usage
if __name__ == "__main__":
    # Load AIS data
    df = pd.read_csv("/path/to/modified_ais_data.csv")
    df['BaseDateTime'] = pd.to_datetime(df['BaseDateTime'])  # Ensure datetime parsing

    # Load water mask (shapefile with global water boundaries)
    water_mask = gpd.read_file("/path/to/world_shapefile.shp")

    # Process AIS data
    processed_paths = process_with_fallback_interpolation(df, water_mask)

    # Save processed paths to CSV (flatten the list for saving)
    flattened_paths = [
        {"LAT": lat, "LON": lon} for path in processed_paths for lat, lon in path
    ]
    pd.DataFrame(flattened_paths).to_csv("processed_paths.csv", index=False)

    print("Processed paths saved to 'processed_paths.csv'.")
